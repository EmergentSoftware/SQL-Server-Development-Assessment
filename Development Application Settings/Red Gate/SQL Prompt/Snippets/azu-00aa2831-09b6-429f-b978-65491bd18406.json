{
  "id": "00aa2831-09b6-429f-b978-65491bd18406",
  "name": "azu",
  "prefix": "azu",
  "description": "ES: Azure Contained Database User - If your application will use only one database a contained user should be created.",
  "body": "/*************************************************************************************************\n** Contained Database User\n** If your application will use only one database a contained user should be created.\n** Redgate Snippet 'azu'\n**\n** Change SSMS to connect with your database. \"Ctrl+U\" then type \"[DATABASE-NAME]\" and Enter Key.\n*************************************************************************************************/\n\nDECLARE @DatabaseName NVARCHAR(128) = N'<Database, ,YourDatabaseName>'; /* This is the name of your database */\nDECLARE @UserName NVARCHAR(100) = N'<LoginName, ,App_AppName>'; /* Use the naming convention of App_[APPLICATION_NAME] */\nDECLARE @Password NVARCHAR(100) = N'<Password, ,ChangeMe123!>'; /* Generated from LastPass */\nDECLARE @IsDBReader BIT = 1; /* 0 = Can NOT select table data, 1 Can select table data (Set to 0 when app user will only insert/update/execute) */\nDECLARE @IsDBWriter BIT = 1; /* 0 = Can NOT insert/update table data, 1 = Can insert/update table data. (Set to 0 if app user is for reporting) */\nDECLARE @IsDBExecutor BIT = 1; /* 0 = Can NOT execute stored procedures, 1 = Can execute stored procedures. (Set to 0 if app user will not call stored procedures) */\nDECLARE @IsDBOwner BIT = 0; /* Almost never should the app user be the owner of the database! If you do enable this, talk to the SQL team to make sure this gets added to the security baseline or it will fail the audit. */\n\n/*************************************************************************************************\n** Enable Contained Users in SQL Server (does not apply to Azure SQL)\n*************************************************************************************************/\nIF SERVERPROPERTY('EngineEdition') <> 5\n    BEGIN\n        DECLARE @StringToExecute NVARCHAR(MAX);\n        SET @StringToExecute = N'\n        EXEC sys.sp_configure ''show advanced'', 1;\n        GO\n        RECONFIGURE;\n        GO\n        EXEC sys.sp_configure ''contained database authentication'', 1;\n        GO\n        RECONFIGURE;\n        GO\n        ALTER DATABASE ' + QUOTENAME(@DatabaseName) + N' SET CONTAINMENT = PARTIAL;';\n\n        EXEC sys.sp_executesql @stmt = @StringToExecute;\n    END;\n\n\n/*************************************************************************************************\n** Creating Contained User\n*************************************************************************************************/\nIF DATABASE_PRINCIPAL_ID(@UserName) IS NULL\n    BEGIN\n        PRINT 'Creating the contained user...';\n        EXECUTE (N'CREATE USER ' + @UserName + ' WITH PASSWORD = ''' + @Password + ''';');\n    END;\nELSE\n    BEGIN\n        PRINT 'Contained user already existed, skipping create...';\n    END;\n\n/*************************************************************************************************\n** Creating Roles\n*************************************************************************************************/\nIF DATABASE_PRINCIPAL_ID('db_executor') IS NULL\n    BEGIN\n        PRINT 'Creating db_executor role...';\n        CREATE ROLE db_executor;\n    END;\nELSE\n    BEGIN\n        PRINT 'The db_executor role already existed, skipping create...';\n    END;\nGRANT EXECUTE TO db_executor;\n\n/*************************************************************************************************\n** Assigning Roles\n*************************************************************************************************/\nIF @IsDBOwner = 1\n    BEGIN\n        PRINT 'Adding user to the db_owner role...';\n        EXECUTE (N'ALTER ROLE db_owner ADD MEMBER ' + @UserName + ';');\n    END;\nELSE\n    BEGIN\n        PRINT 'Removing user from the db_owner role...';\n        EXECUTE (N'ALTER ROLE db_owner DROP MEMBER ' + @UserName + ';');\n    END;\n\nIF @IsDBReader = 1\n    BEGIN\n        PRINT 'Adding user to the db_datareader role...';\n        EXECUTE (N'ALTER ROLE db_datareader ADD MEMBER ' + @UserName + ';');\n    END;\nELSE\n    BEGIN\n        PRINT 'Removing user to the db_datareader role...';\n        EXECUTE (N'ALTER ROLE db_datareader DROP MEMBER ' + @UserName + ';');\n    END;\n\nIF @IsDBWriter = 1\n    BEGIN\n        PRINT 'Adding user to the db_datawriter role...';\n        EXECUTE (N'ALTER ROLE db_datawriter ADD MEMBER ' + @UserName + ';');\n    END;\nELSE\n    BEGIN\n        PRINT 'Removing user to the db_datawriter role...';\n        EXECUTE (N'ALTER ROLE db_datawriter DROP MEMBER ' + @UserName + ';');\n    END;\n\nIF @IsDBExecutor = 1\n    BEGIN\n        PRINT 'Adding user to the db_executor role...';\n        EXECUTE (N'ALTER ROLE db_executor ADD MEMBER ' + @UserName + ';');\n    END;\nELSE\n    BEGIN\n        PRINT 'Removing user to the db_executor role...';\n        EXECUTE (N'ALTER ROLE db_executor DROP MEMBER ' + @UserName + ';');\n    END;\n\n\n/*************************************************************************************************\n** Denying execute on stored procedures\n** If there are certain stored procedures that shouldn't be accessible to the application, you \n** can explicitly deny the app user.\n*************************************************************************************************/\n/* DENY EXECUTE ON dbo.[STORED-PROCEDURE-NAME] TO db_executor; */\n\nGO",
  "placeholders": []
}
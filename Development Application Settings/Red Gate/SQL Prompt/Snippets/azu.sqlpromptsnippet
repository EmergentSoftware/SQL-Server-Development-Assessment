<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>azu</Title>
      <Shortcut>azu</Shortcut>
      <Description>ES: Azure Contained Database User - If your application will use only one database a contained user should be created.</Description>
      <Author />
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations />
      <Code Language="sql"><![CDATA[/*************************************************************************************************
** Contained Database User
** If your application will use only one database a contained user should be created.
** Redgate Snippet 'azu'
**
** Change SSMS to connect with your database. "Ctrl+U" then type "[DATABASE-NAME]" and Enter Key.
*************************************************************************************************/

DECLARE @DatabaseName NVARCHAR(128) = N'<Database, ,YourDatabaseName>'; /* This is the name of your database */
DECLARE @UserName NVARCHAR(100) = N'<LoginName, ,App_AppName>'; /* Use the naming convention of App_[APPLICATION_NAME] */
DECLARE @Password NVARCHAR(100) = N'<Password, ,ChangeMe123!>'; /* Generated from LastPass */
DECLARE @IsDBReader BIT = 1; /* 0 = Can NOT select table data, 1 Can select table data (Set to 0 when app user will only insert/update/execute) */
DECLARE @IsDBWriter BIT = 1; /* 0 = Can NOT insert/update table data, 1 = Can insert/update table data. (Set to 0 if app user is for reporting) */
DECLARE @IsDBExecutor BIT = 1; /* 0 = Can NOT execute stored procedures, 1 = Can execute stored procedures. (Set to 0 if app user will not call stored procedures) */
DECLARE @IsDBOwner BIT = 0; /* Almost never should the app user be the owner of the database! If you do enable this, talk to the SQL team to make sure this gets added to the security baseline or it will fail the audit. */

/*************************************************************************************************
** Enable Contained Users in SQL Server (does not apply to Azure SQL)
*************************************************************************************************/
IF SERVERPROPERTY('EngineEdition') <> 5
    BEGIN
        DECLARE @StringToExecute NVARCHAR(MAX);
        SET @StringToExecute = N'
        EXEC sys.sp_configure ''show advanced'', 1;
        GO
        RECONFIGURE;
        GO
        EXEC sys.sp_configure ''contained database authentication'', 1;
        GO
        RECONFIGURE;
        GO
        ALTER DATABASE ' + QUOTENAME(@DatabaseName) + N' SET CONTAINMENT = PARTIAL;';

        EXEC sys.sp_executesql @stmt = @StringToExecute;
    END;


/*************************************************************************************************
** Creating Contained User
*************************************************************************************************/
IF DATABASE_PRINCIPAL_ID(@UserName) IS NULL
    BEGIN
        PRINT 'Creating the contained user...';
        EXECUTE (N'CREATE USER ' + @UserName + ' WITH PASSWORD = ''' + @Password + ''';');
    END;
ELSE
    BEGIN
        PRINT 'Contained user already existed, skipping create...';
    END;

/*************************************************************************************************
** Creating Roles
*************************************************************************************************/
IF DATABASE_PRINCIPAL_ID('db_executor') IS NULL
    BEGIN
        PRINT 'Creating db_executor role...';
        CREATE ROLE db_executor;
    END;
ELSE
    BEGIN
        PRINT 'The db_executor role already existed, skipping create...';
    END;
GRANT EXECUTE TO db_executor;

/*************************************************************************************************
** Assigning Roles
*************************************************************************************************/
IF @IsDBOwner = 1
    BEGIN
        PRINT 'Adding user to the db_owner role...';
        EXECUTE (N'ALTER ROLE db_owner ADD MEMBER ' + @UserName + ';');
    END;
ELSE
    BEGIN
        PRINT 'Removing user from the db_owner role...';
        EXECUTE (N'ALTER ROLE db_owner DROP MEMBER ' + @UserName + ';');
    END;

IF @IsDBReader = 1
    BEGIN
        PRINT 'Adding user to the db_datareader role...';
        EXECUTE (N'ALTER ROLE db_datareader ADD MEMBER ' + @UserName + ';');
    END;
ELSE
    BEGIN
        PRINT 'Removing user to the db_datareader role...';
        EXECUTE (N'ALTER ROLE db_datareader DROP MEMBER ' + @UserName + ';');
    END;

IF @IsDBWriter = 1
    BEGIN
        PRINT 'Adding user to the db_datawriter role...';
        EXECUTE (N'ALTER ROLE db_datawriter ADD MEMBER ' + @UserName + ';');
    END;
ELSE
    BEGIN
        PRINT 'Removing user to the db_datawriter role...';
        EXECUTE (N'ALTER ROLE db_datawriter DROP MEMBER ' + @UserName + ';');
    END;

IF @IsDBExecutor = 1
    BEGIN
        PRINT 'Adding user to the db_executor role...';
        EXECUTE (N'ALTER ROLE db_executor ADD MEMBER ' + @UserName + ';');
    END;
ELSE
    BEGIN
        PRINT 'Removing user to the db_executor role...';
        EXECUTE (N'ALTER ROLE db_executor DROP MEMBER ' + @UserName + ';');
    END;


/*************************************************************************************************
** Denying execute on stored procedures
** If there are certain stored procedures that shouldn't be accessible to the application, you 
** can explicitly deny the app user.
*************************************************************************************************/
/* DENY EXECUTE ON dbo.[STORED-PROCEDURE-NAME] TO db_executor; */

GO]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>
{
  "id": "f7f6b91b-4bc5-4d05-b627-b3ebed72232d",
  "name": "chk",
  "prefix": "chk",
  "description": "Creates an extended event session, runs the code you want to test, extracts the output and then stops the session",
  "body": "IF EXISTS --if the session already exists, then delete it. We are assuming you've changed something\n  (\n  SELECT * FROM sys.server_event_sessions\n    WHERE server_event_sessions.name = 'CheckingSQLStatements'\n  )\n  DROP EVENT SESSION CheckingSQLStatements ON SERVER;\nGO\nCREATE EVENT SESSION CheckingSQLStatements --call it what you wish, of course\nON SERVER\n  ADD EVENT sqlserver.sql_statement_completed --we just have one event\n    (ACTION (sqlserver.database_name, sqlserver.sql_text, sqlserver.plan_handle)-- and these global vars\n     WHERE (sqlserver.like_i_sql_unicode_string(sqlserver.sql_text, N'--Test these queries%'))\n\t --we just want the batch and nothing else so we put an identifying string at the start\n    )\n  ADD TARGET package0.ring_buffer \n  --we don't need a more permanent record or a bucket count\nWITH (STARTUP_STATE = OFF);\nGO\nALTER EVENT SESSION CheckingSQLStatements ON SERVER STATE = START;\n--V-----The Batch being tested starts here ------V\nGO --don't change this next line without changing the WHERE clause above\n--Test these queries\n-------------------------------------------------------------------\n\n$SELECTEDTEXT$\n\n------------------------------------------------------------------\ngo\nDECLARE @Target_Data XML =\n          (\n          SELECT TOP 1 Cast(xet.target_data AS XML) AS targetdata\n            FROM sys.dm_xe_session_targets AS xet\n              INNER JOIN sys.dm_xe_sessions AS xes\n                ON xes.address = xet.event_session_address\n            WHERE xes.name = 'CheckingSQLStatements'\n              AND xet.target_name = 'ring_buffer'\n          );\nSELECT \nCONVERT(datetime2,\n        SwitchOffset(CONVERT(datetimeoffset,the.event_data.value('(@timestamp)[1]', 'datetime2')),\n\t\tDateName(TzOffset, SYSDATETIMEOFFSET()))) AS datetime_local,\nCONVERT(DECIMAL(6,3),round(the.event_data.value('(data[@name=\"duration\"]/value)[1]', 'bigint')/1000000.0,3,1))  AS duration,\nthe.event_data.value('(data[@name=\"statement\"]/value)[1]', 'nvarchar(max)') AS [statement],\n--the.event_data.value('(action[@name=\"sql_text\"]/value)[1]', 'nvarchar(max)') AS sql_text,\n--the.event_data.value('(action[@name=\"database_name\"]/value)[1]', 'nvarchar(80)') AS [database_name],\nqp.query_plan,\nthe.event_data.value('(data[@name=\"cpu_time\"]/value)[1]', 'bigint') AS [cpu_time(microsSecs)],\nthe.event_data.value('(data[@name=\"physical_reads\"]/value)[1]', 'bigint') AS physical_reads,\nthe.event_data.value('(data[@name=\"logical_reads\"]/value)[1]', 'bigint') AS logical_reads,\nthe.event_data.value('(data[@name=\"writes\"]/value)[1]', 'bigint') AS writes,\nthe.event_data.value('(data[@name=\"row_count\"]/value)[1]', 'bigint') AS row_count\n--the.event_data.value('(data[@name=\"last_row_count\"]/value)[1]', 'int') AS last_row_count,\n--the.event_data.value('(data[@name=\"line_number\"]/value)[1]', 'int') AS line_number,\n--the.event_data.value('(data[@name=\"offset\"]/value)[1]', 'int') AS offset,\n--the.event_data.value('(data[@name=\"offset_end\"]/value)[1]', 'int') AS offset_end,\n\nFROM @Target_Data.nodes('//RingBufferTarget/event') AS the (event_data)\n  CROSS APPLY sys.dm_exec_query_plan(\n   Convert(varbinary(64),--convert to valid plan handle\n          '0x' + the.event_data.value('(action[@name=\"plan_handle\"]/value)[1]', 'nvarchar(max)')\n\t\t  ,1)) as qp\n\nALTER EVENT SESSION CheckingSQLStatements ON SERVER STATE = STOP;",
  "placeholders": []
}
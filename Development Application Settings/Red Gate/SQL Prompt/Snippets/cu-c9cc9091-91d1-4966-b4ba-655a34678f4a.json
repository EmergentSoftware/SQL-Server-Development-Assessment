{
  "id": "c9cc9091-91d1-4966-b4ba-655a34678f4a",
  "name": "cu",
  "prefix": "cu",
  "description": "Create a database user",
  "body": "/*************************************************************************************************\n** # Database User and Roles Assignment Script\n**   Redgate Snippet: cu\n**\n**   If your application uses only one database, a contained user should be created (RECOMMENDED)\n**     You can create a contained user in each database with the same username and password\n**   If your application uses multiple databases, you CAN create a SQL Server login (NOT RECOMMENDED)\n**     You will create a database user from the SQL Server login for each database\n**     THIS IS NOT PORTABLE! SQL LOGIN MUST BE CREATED ON OTHER SQL SERVERS WITH THE SAME SID.\n**   \n**   This script will enabled contained users if it is executed on a SQL Server\n**   This script will create a contained database user if it does not exist\n**   This script will add or remove the username from the roles \n**   This script can add or remove a role for ETL, this allows GRANT ALTER on tables that use TRUNCATE\n**  \n**   Change SSMS to connect with your database. \"Ctrl+U\" then type \"[DATABASE-NAME]\" and Enter Key.\n**   Modify the variables to set the database name, username, password, and roles. Then execute.\n**\n** # Migrate User Created from Login\n**\n**   ## For SQL Server Databases\n**     Step 1: Ensure the database is setup as a contained database\n**       https://docs.microsoft.com/en-us/sql/relational-databases/security/contained-database-users-making-your-database-portable?view=sql-server-ver15\n**     Step 2: EXEC sp_migrate_user_to_contained @username = N'user', @rename = N'keep_name', @disablelogin = N'disable_login';\n**       https://docs.microsoft.com/en-us/sql/relational-databases/system-stored-procedures/sp-migrate-user-to-contained-transact-sql?view=sql-server-ver15\n**\n**   ## For Azure SQL Databases\n**     Azure SQL Database does not support the system stored procedure sp_migrate_user_to_contained\n**     You must drop and recreate the database user and login.\n**       Step 1: DROP LOGIN App_AppName; /* Run in master database */\n**       Step 2: DROP USER App_AppName; /* Run in app database */\n**       Step 3: Create a contained user with this script\n**     An alternative would be to create a new contained database user and change the connection string,\n**       then drop and the database user and login.\n**\n*************************************************************************************************/\n\n/* Database Variables */\nDECLARE @DatabaseName NVARCHAR(128) = N'<SQLServerDatabase, ,IgnoreForAzureSQLDatabase>'; /* This is the name of your SQL Server database, used to enable user containment */\n\n/* User Info Variables */\nDECLARE\n    @UserName       NVARCHAR(100) = N'<LoginName, ,App_AppName>' /* Use the naming convention of App_[APPLICATION_NAME] */\n   ,@Password       NVARCHAR(100) = N'<Password, ,ChangeMe123!>' /* Generated from LastPass */\n   ,@IsLoginUser    BIT           = 0                            /* 0 = Creates a database contained user, 1 = Creates a login and database contained user */\n   ,@IsLoginCreated BIT           = 0;                           /* 0 = The SQL Server login has not been created yet, 1 = The SQL Server login has been created */\n\n/* Common Roles Variables */\nDECLARE\n    @IsDBReader   BIT = 1  /* 0 = Can NOT select table data, 1 = Can select table data (Set to 0 when app user will only insert/update/execute) */\n   ,@IsDBWriter   BIT = 1  /* 0 = Can NOT insert/update table data, 1 = Can insert/update table data. (Set to 0 if app user is for reporting) */\n   ,@IsDBExecutor BIT = 1; /* 0 = Can NOT execute stored procedures, 1 = Can execute stored procedures. (Set to 0 if app user will not call stored procedures) */\n\n/* Uncommon Roles Variables, talk to the SQL team to make sure you need any of these roles */\nDECLARE\n    @IsDBOwner          BIT           = 0                       /* 0 = Does not grant GOD permissions, 1 = Grants GOD permissions (Almost never should an app user be the owner of the database!) */\n   ,@IsDBAccessAdmin    BIT           = 0                       /* 0 = Can NOT add or remove access to the database, 1 = Can add or remove access to the database */\n   ,@IsDBBackupOperator BIT           = 0                       /* 0 = Can NOT back up the database, 1 = Can back up the database */\n   ,@IsDBDDLAdmin       BIT           = 0                       /* 0 = Can NOT run any Data Definition Language (DDL) command in the database, 1 = Can run any Data Definition Language (DDL) command in the database */\n   ,@IsDBDenyDataReader BIT           = 0                       /* 0 = Does NOT override any read data role permissions, 1 = Cannot read any data in user tables in the database */\n   ,@IsDBDenyDataWriter BIT           = 0                       /* 0 = Does NOT override any add, modify, or delete data role permissions, 1 = Cannot add, modify, or delete any data in user tables in the database */\n   ,@IsDBSecurityAdmin  BIT           = 0                       /* 0 = Can NOT modify role membership for custom roles and manage permissions, 1 = Can modify role membership for custom roles and manage permissions */\n   ,@IsETL              BIT           = 0                       /* 0 = Can NOT perform tasks like TRUNCATE, 1 = Can perform tasks like TRUNCATE (There are other methods to allow TRUNCATE) */\n   ,@IsETLSchemas       NVARCHAR(MAX) = N'Staging,Integration'; /* Provide a comma delimited list of schemas to GRANT ALTER on */\n\n\n\n\n\n\n/*************************************************************************************************\n** PRINT the code to create a server level login so it can be used to create a user from\n*************************************************************************************************/\nIF @IsLoginUser = 1\n   AND @IsLoginCreated = 0\n    BEGIN\n        PRINT '/*************************************************************************************************';\n        PRINT '** Step 1: Execute this script in the master database in a new query window';\n        PRINT '** Step 2: Set the varible @IsLoginCreated = 1';\n        PRINT '** Step 3: Re-run Database User and Roles Assignment Script';\n        PRINT '*************************************************************************************************/';\n        IF SERVERPROPERTY('EngineEdition') = 5\n            BEGIN\n                PRINT '/* \"Ctrl+U\" then type \"master\" then the Enter Key */';\n            END;\n        ELSE\n            BEGIN\n                PRINT 'USE master;';\n                PRINT 'GO';\n            END;\n        PRINT 'IF NOT EXISTS (SELECT * FROM sys.sql_logins WHERE name = ''' + @UserName + ''')';\n        PRINT '    BEGIN';\n        PRINT '        CREATE LOGIN [' + @UserName + '] WITH PASSWORD = ''' + @Password + ''';';\n        PRINT '    END;';\n        PRINT '';\n        PRINT '';\n        PRINT '';\n        PRINT '';\n\n        RETURN;\n    END;\n\n\n/*************************************************************************************************\n** Enable Contained Users in SQL Server (does not apply to Azure SQL)\n*************************************************************************************************/\nIF SERVERPROPERTY('EngineEdition') <> 5\n   AND @IsLoginUser = 0\n    BEGIN\n        DECLARE @StringToExecuteContainedUsers NVARCHAR(MAX);\n\n        PRINT 'Setting SQL Server to allow contained database authentication...';\n        PRINT 'Altering database to set containment to partial...';\n\n        SET @StringToExecuteContainedUsers = N'\n\t\tEXEC sys.sp_configure ''show advanced'', 1;\n\t\tRECONFIGURE;\n\t\tEXEC sys.sp_configure ''contained database authentication'', 1;\n\t\tRECONFIGURE;\n\t\tALTER DATABASE ' + QUOTENAME(@DatabaseName) + N' SET CONTAINMENT = PARTIAL;';\n\n        EXEC sys.sp_executesql @stmt = @StringToExecuteContainedUsers;\n    END;\n\n/*************************************************************************************************\n** Creating User\n*************************************************************************************************/\nIF @IsLoginUser = 1\n    BEGIN\n        IF DATABASE_PRINCIPAL_ID(@UserName) IS NULL\n            BEGIN\n                PRINT 'Creating the user from login...';\n                EXECUTE (N'CREATE USER [' + @UserName + '] FROM LOGIN [' + @UserName + '];');\n            END;\n        ELSE\n            BEGIN\n                PRINT 'User already existed, skipping create...';\n            END;\n    END;\nELSE\n    BEGIN\n        IF DATABASE_PRINCIPAL_ID(@UserName) IS NULL\n            BEGIN\n                PRINT 'Creating the contained user...';\n                EXECUTE (N'CREATE USER [' + @UserName + '] WITH PASSWORD = ''' + @Password + ''';');\n            END;\n        ELSE\n            BEGIN\n                PRINT 'Contained user already existed, skipping create...';\n            END;\n    END;\n\n/*************************************************************************************************\n** Creating Roles\n*************************************************************************************************/\nIF DATABASE_PRINCIPAL_ID('db_executor') IS NULL\n    BEGIN\n        PRINT 'Creating db_executor role...';\n        CREATE ROLE db_executor;\n    END;\nELSE\n    BEGIN\n        PRINT 'The db_executor role already existed, skipping create...';\n    END;\nGRANT EXECUTE TO db_executor;\n\nIF @IsETL = 1\n    BEGIN\n        IF DATABASE_PRINCIPAL_ID('db_etl') IS NULL\n            BEGIN\n                PRINT 'Creating db_etl role...';\n                CREATE ROLE db_etl;\n            END;\n        ELSE\n            BEGIN\n                PRINT 'The db_etl role already existed, skipping create...';\n            END;\n\n        IF LEN(@IsETLSchemas) > 0\n            BEGIN\n\n                DECLARE @StringToExecuteETL NVARCHAR(MAX) = N'';\n\n                SELECT\n                    @StringToExecuteETL = @StringToExecuteETL + N'GRANT ALTER ON SCHEMA :: ' + SS.value + N' TO db_etl;'\n                FROM\n                    STRING_SPLIT(@IsETLSchemas, ',') AS SS;\n\n\n                PRINT 'Executing: ' + @StringToExecuteETL;\n                EXEC sys.sp_executesql @stmt = @StringToExecuteETL;\n            END;\n    END;\n/*************************************************************************************************\n** # Denying Execute on Stored Procedures\n**   If there are certain stored procedures that shouldn't be accessible to the application, you \n**   can explicitly deny the app user.\n*************************************************************************************************/\n/* DENY EXECUTE ON dbo.[STORED-PROCEDURE-NAME] TO db_executor; */\n\n\n/*************************************************************************************************\n** Assigning Roles\n*************************************************************************************************/\nIF @IsDBReader = 1\n    BEGIN\n        PRINT 'Adding user to the db_datareader role...';\n        EXECUTE (N'ALTER ROLE db_datareader ADD MEMBER [' + @UserName + '];');\n    END;\nELSE\n    BEGIN\n        PRINT 'Removing user to the db_datareader role...';\n        EXECUTE (N'ALTER ROLE db_datareader DROP MEMBER [' + @UserName + '];');\n    END;\n\nIF @IsDBWriter = 1\n    BEGIN\n        PRINT 'Adding user to the db_datawriter role...';\n        EXECUTE (N'ALTER ROLE db_datawriter ADD MEMBER [' + @UserName + '];');\n    END;\nELSE\n    BEGIN\n        PRINT 'Removing user to the db_datawriter role...';\n        EXECUTE (N'ALTER ROLE db_datawriter DROP MEMBER [' + @UserName + '];');\n    END;\n\nIF @IsDBExecutor = 1\n    BEGIN\n        PRINT 'Adding user to the db_executor role...';\n        EXECUTE (N'ALTER ROLE db_executor ADD MEMBER [' + @UserName + '];');\n    END;\nELSE\n    BEGIN\n        PRINT 'Removing user to the db_executor role...';\n        EXECUTE (N'ALTER ROLE db_executor DROP MEMBER [' + @UserName + '];');\n    END;\n\nIF DATABASE_PRINCIPAL_ID('db_etl') IS NOT NULL\n    BEGIN\n        IF @IsETL = 1\n            BEGIN\n                PRINT 'Adding user to the db_etl role...';\n                EXECUTE (N'ALTER ROLE db_etl ADD MEMBER [' + @UserName + '];');\n            END;\n        ELSE\n            BEGIN\n                PRINT 'Removing user to the db_etl role...';\n                EXECUTE (N'ALTER ROLE db_etl DROP MEMBER [' + @UserName + '];');\n            END;\n    END;\n\nIF @IsDBOwner = 1\n    BEGIN\n        PRINT 'Adding user to the db_owner role...';\n        EXECUTE (N'ALTER ROLE db_owner ADD MEMBER [' + @UserName + '];');\n    END;\nELSE\n    BEGIN\n        PRINT 'Removing user from the db_owner role...';\n        EXECUTE (N'ALTER ROLE db_owner DROP MEMBER [' + @UserName + '];');\n    END;\n\nIF @IsDBAccessAdmin = 1\n    BEGIN\n        PRINT 'Adding user to the db_accessadmin role...';\n        EXECUTE (N'ALTER ROLE db_accessadmin ADD MEMBER [' + @UserName + '];');\n    END;\nELSE\n    BEGIN\n        PRINT 'Removing user from the db_accessadmin role...';\n        EXECUTE (N'ALTER ROLE db_accessadmin DROP MEMBER [' + @UserName + '];');\n    END;\n\nIF @IsDBBackupOperator = 1\n    BEGIN\n        PRINT 'Adding user to the db_backupoperator role...';\n        EXECUTE (N'ALTER ROLE db_backupoperator ADD MEMBER [' + @UserName + '];');\n    END;\nELSE\n    BEGIN\n        PRINT 'Removing user from the db_backupoperator role...';\n        EXECUTE (N'ALTER ROLE db_backupoperator DROP MEMBER [' + @UserName + '];');\n    END;\n\nIF @IsDBDDLAdmin = 1\n    BEGIN\n        PRINT 'Adding user to the db_ddladmin role...';\n        EXECUTE (N'ALTER ROLE db_ddladmin ADD MEMBER [' + @UserName + '];');\n    END;\nELSE\n    BEGIN\n        PRINT 'Removing user from the db_ddladmin role...';\n        EXECUTE (N'ALTER ROLE db_ddladmin DROP MEMBER [' + @UserName + '];');\n    END;\n\nIF @IsDBDenyDataReader = 1\n    BEGIN\n        PRINT 'Adding user to the db_denydatareader role...';\n        EXECUTE (N'ALTER ROLE db_denydatareader ADD MEMBER [' + @UserName + '];');\n    END;\nELSE\n    BEGIN\n        PRINT 'Removing user from the db_denydatareader role...';\n        EXECUTE (N'ALTER ROLE db_denydatareader DROP MEMBER [' + @UserName + '];');\n    END;\n\nIF @IsDBDenyDataWriter = 1\n    BEGIN\n        PRINT 'Adding user to the db_denydatawriter role...';\n        EXECUTE (N'ALTER ROLE db_denydatawriter ADD MEMBER [' + @UserName + '];');\n    END;\nELSE\n    BEGIN\n        PRINT 'Removing user from the db_denydatawriter role...';\n        EXECUTE (N'ALTER ROLE db_denydatawriter DROP MEMBER [' + @UserName + '];');\n    END;\n\nIF @IsDBSecurityAdmin = 1\n    BEGIN\n        PRINT 'Adding user to the db_securityadmin role...';\n        EXECUTE (N'ALTER ROLE db_securityadmin ADD MEMBER [' + @UserName + '];');\n    END;\nELSE\n    BEGIN\n        PRINT 'Removing user from the db_securityadmin role...';\n        EXECUTE (N'ALTER ROLE db_securityadmin DROP MEMBER [' + @UserName + '];');\n    END;\nGO",
  "placeholders": []
}
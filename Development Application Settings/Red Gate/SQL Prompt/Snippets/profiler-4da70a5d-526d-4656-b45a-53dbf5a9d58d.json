{
  "id": "4da70a5d-526d-4656-b45a-53dbf5a9d58d",
  "prefix": "profiler",
  "description": "ES: A replacement for SQL Server Profiler",
  "body": "/**********************************************************************************************************************\r\n** This is a SQL Server Profiler replacement. It will return two results from different Dynamic Management Views.\r\n** USE: Set the @RunSeconds and any search variables below you might need to narrow down your results.\r\n*********************************************************************************************************************/\r\nSET NOCOUNT ON;\r\nSET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\r\nSET LOCK_TIMEOUT 1000;\r\n\r\n/* How long do you want to grab queries? */\r\nDECLARE @RunSeconds tinyint = 20;\r\n\r\n/* Search Variables - use N'' if you have national characters to find */\r\nDECLARE @QueryText nvarchar(500) = NULL; /* What should the query text contain? */\r\nDECLARE @SessionId smallint = NULL; /* SSMS Session id */\r\nDECLARE @LoginName nvarchar(128) = NULL; /* Login User Name */\r\nDECLARE @ClientIPAddress nvarchar(48) = NULL; /* IP Address of the client */\r\nDECLARE @HostName nvarchar(128) =  NULL; /* The name where it is run from */\r\nDECLARE @ProgramName nvarchar(128) = NULL; /* Name of the program */\r\n\r\n/* Set the time frame based on the run sections variable */\r\nDECLARE @StartTime datetime2(7) = GETDATE();\r\nDECLARE @EndTime datetime2(7) = DATEADD(SECOND, @RunSeconds, @StartTime); /* This calculates the end time. */\r\n\r\n/**********************************************************************************************************************\r\n** T-SQL commands from dm_exec_requests DMV. \r\n** It is possible to miss an executing query if it is fast.\r\n**********************************************************************************************************************/\r\nDROP TABLE IF EXISTS #Profiler;\r\nCREATE TABLE #Profiler (\r\n    text               nvarchar(MAX) NULL\r\n   ,session_id         smallint      NULL\r\n   ,start_time         datetime      NULL\r\n   ,login_name         nvarchar(128) NULL\r\n   ,client_net_address nvarchar(48)  NULL\r\n   ,host_name          nvarchar(128) NULL\r\n   ,program_name       nvarchar(128) NULL\r\n);\r\n\r\nWHILE GETDATE() <= @EndTime\r\n    BEGIN\r\n        INSERT INTO #Profiler (\r\n            text\r\n           ,session_id\r\n           ,start_time\r\n           ,login_name\r\n           ,client_net_address\r\n           ,host_name\r\n           ,program_name\r\n        )\r\n        SELECT\r\n            ST.text\r\n           ,R.session_id\r\n           ,R.start_time\r\n           ,S.login_name\r\n           ,C.client_net_address\r\n           ,S.host_name\r\n           ,S.program_name\r\n        FROM\r\n            sys.dm_exec_requests                           AS R WITH (NOLOCK)\r\n            INNER JOIN sys.dm_exec_sessions                AS S WITH (NOLOCK)\r\n                ON R.session_id = S.session_id\r\n            LEFT JOIN sys.dm_exec_connections              AS C WITH (NOLOCK)\r\n                ON R.session_id = C.session_id\r\n            OUTER APPLY sys.dm_exec_sql_text(R.sql_handle) AS ST\r\n        WHERE\r\n            R.status NOT IN ('sleeping', 'background')\r\n        AND ST.text NOT LIKE (N'%DROP TABLE IF EXISTS #Profiler;%')\r\n        AND ST.text NOT LIKE (N'%DECLARE @i int;%')\r\n        AND R.session_id > 50 /* Exclude SQL Server internal process sessions */\r\n        OPTION (RECOMPILE);\r\n\r\n    END;\r\n\r\n/* Grab the queries out of the temp table. */\r\nSELECT\r\n    QueryText       = text\r\n   ,SessionId       = session_id\r\n   ,StartTime       = start_time\r\n   ,LoginName       = login_name\r\n   ,ClientIPAddress = client_net_address\r\n   ,HostName        = host_name\r\n   ,ProgramName     = program_name\r\nFROM\r\n    #Profiler\r\nWHERE\r\n    (text LIKE '%' + @QueryText + '%' OR @QueryText IS NULL)\r\nAND (session_id         = @SessionId OR @SessionId IS NULL)\r\nAND (login_name         = @LoginName OR @LoginName IS NULL)\r\nAND (client_net_address = @ClientIPAddress OR @ClientIPAddress IS NULL)\r\nAND (host_name          = @HostName OR @HostName IS NULL)\r\nAND (program_name       = @ProgramName OR @ProgramName IS NULL)\r\nGROUP BY\r\n    text\r\n   ,session_id\r\n   ,start_time\r\n   ,login_name\r\n   ,client_net_address\r\n   ,host_name\r\n   ,program_name\r\nORDER BY\r\n    start_time DESC;\r\n\r\n/**********************************************************************************************************************\r\n** Last T-SQL commands from query stats DMV. \r\n** Some queries might not have a cached plan.\r\n** This does not have as much information as the above query.\r\n**********************************************************************************************************************/\r\nSELECT\r\n    QueryText     = ST.text\r\n   ,Count         = QS.execution_count\r\n   ,LastExecution = QS.last_execution_time\r\n   ,PhysicalReads = QS.last_physical_reads\r\n   ,ElapsedTime   = QS.last_elapsed_time\r\n   ,Rows          = QS.last_rows\r\n   ,Spills        = QS.last_spills\r\nFROM\r\n    sys.dm_exec_query_stats                         AS QS WITH (NOLOCK)\r\n    CROSS APPLY sys.dm_exec_sql_text(QS.sql_handle) AS ST\r\nWHERE\r\n    ST.text NOT LIKE (N'%DROP TABLE IF EXISTS #Profiler;%')\r\nAND ST.text NOT LIKE (N'%CROSS APPLY sys.dm_exec_sql_text(%')\r\nAND (QS.last_execution_time >= @StartTime) -- OR QS.last_execution_time <= )\r\nORDER BY\r\n    QS.last_execution_time DESC\r\nOPTION (RECOMPILE);"
}
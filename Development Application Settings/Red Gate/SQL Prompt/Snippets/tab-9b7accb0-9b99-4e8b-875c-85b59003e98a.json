{
  "id": "9b7accb0-9b99-4e8b-875c-85b59003e98a",
  "name": "tab",
  "prefix": "tab",
  "description": "tSQLt: about - [tSQLt - Database Unit Testing for SQL Server. Get it at http://tsqlt.org]",
  "body": "/*\n    -----------------\n    -- About tSQLt --\n    -----------------\n\ntSQLt is an open source unit testing framework for SQL Server. \ntSQLt is coauthored by:\n- Dennis Lloyd Jr. ( @dennislloydjr | http://curiouslycorrect.com/ )\n- Sebastian Meine ( @sqlity | http://sqlity.net )\n\nYou can download tSQLt at http://tSQLt.org/downloads\nA more complete set of SQL Prompt snippets is available there too.\n\ntSQLt provides an array of procedures that help you to write robust test cases\nby isolating dependencies (e.g. tSQLt.FakeTable or tSQLt.SpyProcedure) and \nasserting correct behavior (e.g. tSQLt.AssertEqualsTable or tSQLt.ExpectException).\n\nTo create a test, you first need to create a schema using the tSQLt.NewTextClass\nprocedure. Any procedure that lives in such a schema and that has a name that \nbegins with the four letters \"test\" is considdered a test case. To execute a test\njust run tSQLt.Run passing in either the schema name or the fully qualified\ntest case name. To execute all test cases in the database run tSQLt.RunAll\n\nYou can find the tSQLt manual and examples at http://tsqlt.org/user-guide/\n\nTo check the version of tSQLt that is currently installed execute this query:\nSELECT * FROM tSQLt.Info();\nThe Version and the ClrVersion should always match.\n\nFor an easier way to manage and execute your tests check out Red Gate SQL Test.\n\nBelow is a test case template that also explains the three parts that every \ntest should contain.\n*/\nGO\n--  Comments here are associated with the test.\n--  For test case examples, see: http://tsqlt.org/user-guide/tsqlt-tutorial/\nCREATE PROCEDURE [<Test_Class,sysname,>].[<Test_Name,sysname,test >]\nAS\nBEGIN\n  --Assemble\n  --  This section is for code that sets up the environment. It often\n  --  contains calls to methods such as tSQLt.FakeTable and tSQLt.SpyProcedure\n  --  along with INSERTs of relevant data.\n  --  For more information, see http://tsqlt.org/user-guide/isolating-dependencies/\n  \n  --Act\n  --  Execute the code under test like a stored procedure, function or view\n  --  and capture the results in variables or tables.\n  \n  --Assert\n  --  Compare the expected and actual values, or call tSQLt.Fail in an IF statement.  \n  --  Typical Asserts: tSQLt.AssertEquals, tSQLt.AssertEqualsString, tSQLt.AssertEqualsTable\n  --  For a complete list, see: http://tsqlt.org/user-guide/assertions/\n  EXEC tSQLt.Fail 'TODO:Implement this test.'\n  \nEND;\nGO\n\n",
  "placeholders": []
}